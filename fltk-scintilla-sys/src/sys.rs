/* automatically generated by rust-bindgen 0.56.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Widget {
    _unused: [u8; 0],
}
pub type Fl_Callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
>;
pub type custom_handler_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Fl_Widget,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type custom_draw_callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
>;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Scintilla {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Scintilla_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Scintilla;
}
extern "C" {
    pub fn Fl_Scintilla_x(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_y(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_width(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_height(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_label(arg1: *mut Fl_Scintilla) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Scintilla_set_label(arg1: *mut Fl_Scintilla, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Scintilla_redraw(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_show(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_hide(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_activate(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_deactivate(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_redraw_label(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_resize(
        arg1: *mut Fl_Scintilla,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scintilla_widget_resize(
        arg1: *mut Fl_Scintilla,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scintilla_tooltip(arg1: *mut Fl_Scintilla) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Scintilla_set_tooltip(arg1: *mut Fl_Scintilla, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Scintilla_get_type(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_type(arg1: *mut Fl_Scintilla, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_color(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scintilla_set_color(arg1: *mut Fl_Scintilla, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Scintilla_measure_label(
        arg1: *const Fl_Scintilla,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scintilla_label_color(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scintilla_set_label_color(arg1: *mut Fl_Scintilla, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Scintilla_label_font(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_label_font(arg1: *mut Fl_Scintilla, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_label_size(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_label_size(arg1: *mut Fl_Scintilla, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_label_type(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_label_type(arg1: *mut Fl_Scintilla, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_box(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_box(arg1: *mut Fl_Scintilla, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_changed(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_changed(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_clear_changed(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_align(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_align(arg1: *mut Fl_Scintilla, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_delete(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_set_image(arg1: *mut Fl_Scintilla, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scintilla_handle(
        self_: *mut Fl_Scintilla,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scintilla_handle_event(self_: *mut Fl_Scintilla, event: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_draw(
        self_: *mut Fl_Scintilla,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scintilla_resize_callback(
        self_: *mut Fl_Scintilla,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scintilla_set_when(arg1: *mut Fl_Scintilla, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_when(arg1: *const Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_image(arg1: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_parent(self_: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_selection_color(arg1: *mut Fl_Scintilla) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scintilla_set_selection_color(arg1: *mut Fl_Scintilla, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Scintilla_do_callback(arg1: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_inside(
        self_: *const Fl_Scintilla,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_window(arg1: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_top_window(arg1: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_takes_events(arg1: *const Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_user_data(arg1: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_take_focus(self_: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_set_visible_focus(self_: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_clear_visible_focus(self_: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_visible_focus(self_: *mut Fl_Scintilla, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_has_visible_focus(self_: *mut Fl_Scintilla) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scintilla_set_user_data(arg1: *mut Fl_Scintilla, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scintilla_draw_data(self_: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_handle_data(self_: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_set_draw_data(self_: *mut Fl_Scintilla, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scintilla_set_handle_data(
        self_: *mut Fl_Scintilla,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scintilla_damage(self_: *const Fl_Scintilla) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Scintilla_set_damage(self_: *mut Fl_Scintilla, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Scintilla_clear_damage(self_: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_as_window(self_: *mut Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_as_group(self_: *mut Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_set_deimage(arg1: *mut Fl_Scintilla, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scintilla_deimage(arg1: *const Fl_Scintilla) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scintilla_set_callback(
        arg1: *mut Fl_Scintilla,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scintilla_set_deleter(
        arg1: *mut Fl_Scintilla,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Scintilla_visible(self_: *const Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_visible_r(self_: *const Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_active(self_: *const Fl_Scintilla) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scintilla_active_r(self_: *const Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_callback(self_: *const Fl_Scintilla) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Scintilla_SetNotify(
        self_: *mut Fl_Scintilla,
        onnotify: ::std::option::Option<
            unsafe extern "C" fn(
                scn: *mut ::std::os::raw::c_void,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scintilla_SendEditor(
        self_: *mut Fl_Scintilla,
        iMessage: ::std::os::raw::c_uint,
        wParam: usize,
        lParam: isize,
    ) -> isize;
}
extern "C" {
    pub fn Fl_Scintilla_begin(self_: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_end(self_: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_find(
        self_: *mut Fl_Scintilla,
        arg1: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_add(self_: *mut Fl_Scintilla, arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scintilla_insert(
        self_: *mut Fl_Scintilla,
        arg1: *mut ::std::os::raw::c_void,
        pos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scintilla_remove(self_: *mut Fl_Scintilla, wid: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scintilla_remove_by_index(self_: *mut Fl_Scintilla, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_clear(self_: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_children(self_: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_child(
        arg1: *mut Fl_Scintilla,
        index: ::std::os::raw::c_int,
    ) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Scintilla_resizable(self_: *mut Fl_Scintilla, arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scintilla_set_clip_children(self_: *mut Fl_Scintilla, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scintilla_clip_children(self_: *mut Fl_Scintilla) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scintilla_init_sizes(self_: *mut Fl_Scintilla);
}
extern "C" {
    pub fn Fl_Scintilla_draw_child(self_: *const Fl_Scintilla, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Scintilla_update_child(self_: *const Fl_Scintilla, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Scintilla_draw_outside_label(self_: *const Fl_Scintilla, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Scintilla_draw_children(self_: *mut Fl_Scintilla);
}
